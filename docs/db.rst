Application Storage (DB)
=========================

The application storage or DB is a database where we store all the information required or generated by our system. Currently, we offer MongoDB as our application storage solution. MongoDB provides several advantages for storing and managing various types of data in our system:

- **Flexible Schema**: MongoDB's flexible schema allows us to store data with varying structures without needing to adhere strictly to a predefined schema.

- **Scalability**: MongoDB supports horizontal scaling, making it suitable for handling large volumes of data and accommodating future growth.

- **Document-Oriented**: MongoDB stores data in JSON-like documents, which enables easy representation of complex structures and nested data.

- **Indexing**: MongoDB provides efficient indexing capabilities, enabling fast retrieval of data based on different criteria.

- **Rich Query Language**: MongoDB offers a rich query language for retrieving, filtering, and manipulating data.

Stored Information
-------------------

The information stored in the application storage includes:

1. Previously Asked Questions
2. Generated Responses from Our System
3. Database Connections
4. Scanned Information of Structured Databases, used by the text-to-SQL agents.

Abstract Storage Class
----------------------

The application storage options, including MongoDB, inherit from the abstract `DB` class. This abstract class defines the common methods that all storage solutions should implement.

:class:`DB`
^^^^^^^^^^^^

This abstract class provides a consistent interface for working with different storage solutions.

.. method:: insert_one(self, collection: str, obj: dict) -> int

   Inserts a single document into the specified collection.

.. method:: update_or_create(self, collection: str, query: dict, obj: dict) -> int

   Updates or creates a document in the specified collection based on a query.

.. method:: find_one(self, collection: str, query: dict) -> dict

   Retrieves a single document from the specified collection based on a query.

.. method:: find_by_id(self, collection: str, id: str) -> dict

   Retrieves a document from the specified collection based on its ID.

.. method:: find(self, collection: str, query: dict) -> list

   Retrieves a list of documents from the specified collection based on a query.

By utilizing the `DB` abstract class, you can seamlessly switch between different storage implementations while maintaining consistent interaction with the underlying systems.

For detailed implementation guidelines and further assistance, consult our official documentation or reach out to our dedicated support team.